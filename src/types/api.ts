/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bull Board UI for queue monitoring */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Bull Board UI HTML page */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/html": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin dashboard */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Admin dashboard data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            stats?: {
                                /**
                                 * @description Total number of jobs
                                 * @example 1250
                                 */
                                totalJobs?: number;
                                /**
                                 * @description Number of active jobs
                                 * @example 25
                                 */
                                activeJobs?: number;
                                /**
                                 * @description Number of completed jobs
                                 * @example 1200
                                 */
                                completedJobs?: number;
                                /**
                                 * @description Number of failed jobs
                                 * @example 25
                                 */
                                failedJobs?: number;
                                /**
                                 * @description Total number of users
                                 * @example 100
                                 */
                                totalUsers?: number;
                                /**
                                 * @description Total number of webhooks
                                 * @example 50
                                 */
                                totalWebhooks?: number;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all API keys for the authenticated user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API keys retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example API keys retrieved successfully */
                            message?: string;
                            apiKeys?: components["schemas"]["ApiKeyResponse"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new API key */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ApiKey"];
                };
            };
            responses: {
                /** @description API key created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiKeyWithSecretResponse"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an API key */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the API key to update */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A descriptive name for the API key */
                        name?: string;
                        /** @description Array of permissions granted to this key */
                        permissions?: string[];
                        /**
                         * Format: date-time
                         * @description When the API key expires (null for never)
                         */
                        expiresAt?: string;
                        /** @description Whether the API key is active */
                        isActive?: boolean;
                    };
                };
            };
            responses: {
                /** @description API key updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example API key updated successfully */
                            message?: string;
                            apiKey?: components["schemas"]["ApiKeyResponse"];
                        };
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description API key not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        post?: never;
        /** Revoke an API key */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the API key to revoke */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API key revoked successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example API key revoked successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description API key not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description User registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description User already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login with username and password */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                /** @description Invalid credentials */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout the current user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Token refreshed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description New JWT access token */
                            token?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get dashboard statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dashboard statistics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            jobStats?: {
                                /**
                                 * @description Total number of jobs
                                 * @example 1250
                                 */
                                total?: number;
                                /**
                                 * @description Number of active jobs
                                 * @example 8
                                 */
                                active?: number;
                                /**
                                 * @description Number of delayed jobs
                                 * @example 15
                                 */
                                delayed?: number;
                                /**
                                 * @description Number of paused jobs
                                 * @example 2
                                 */
                                paused?: number;
                                /**
                                 * @description Number of jobs waiting for children
                                 * @example 1
                                 */
                                "waiting-children"?: number;
                                /**
                                 * @description Number of completed jobs
                                 * @example 1180
                                 */
                                completed?: number;
                                /**
                                 * @description Number of failed jobs
                                 * @example 47
                                 */
                                failed?: number;
                                /**
                                 * @description Job completion rate percentage
                                 * @example 94.4
                                 */
                                completionRate?: number;
                            };
                            /** @description List of recent jobs */
                            recentJobs?: {
                                /**
                                 * @description Job ID
                                 * @example job-123456
                                 */
                                id?: string;
                                /**
                                 * @description Job name
                                 * @example Data Export
                                 */
                                name?: string;
                                /**
                                 * @description Job status
                                 * @example completed
                                 * @enum {string}
                                 */
                                status?: "active" | "delayed" | "completed" | "failed" | "paused" | "waiting-children";
                                /**
                                 * Format: date-time
                                 * @description Job creation timestamp
                                 * @example 2025-07-06T12:30:45Z
                                 */
                                createdAt?: string;
                                /**
                                 * Format: date-time
                                 * @description Job completion timestamp
                                 * @example 2025-07-06T12:35:12Z
                                 */
                                completedAt?: string;
                                /**
                                 * @description Job duration in seconds
                                 * @example 267
                                 */
                                duration?: number;
                            }[];
                            schedulerStats?: {
                                /**
                                 * @description Number of active scheduled jobs
                                 * @example 8
                                 */
                                activeSchedules?: number;
                                /**
                                 * @description Total number of scheduled jobs
                                 * @example 12
                                 */
                                totalSchedules?: number;
                                /**
                                 * Format: date-time
                                 * @description Next scheduled job timestamp
                                 * @example 2025-07-06T18:00:00Z
                                 */
                                nextScheduledJob?: string;
                            };
                            webhookStats?: {
                                /**
                                 * @description Total number of webhooks
                                 * @example 15
                                 */
                                totalWebhooks?: number;
                                /**
                                 * @description Number of active webhooks
                                 * @example 12
                                 */
                                activeWebhooks?: number;
                                /**
                                 * @description Webhook delivery success rate percentage
                                 * @example 98.5
                                 */
                                deliveryRate?: number;
                                /**
                                 * @description Total number of webhook deliveries
                                 * @example 1250
                                 */
                                totalDeliveries?: number;
                                /**
                                 * @description Number of failed webhook deliveries
                                 * @example 19
                                 */
                                failedDeliveries?: number;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of all flows */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of flows. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FlowResponse"][];
                    };
                };
                /** @description Internal server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new BullMQ flow */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateFlowRequest"];
                };
            };
            responses: {
                /** @description Flow created successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FlowResponse"];
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single flow by its ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the flow. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The flow details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FlowResponse"];
                    };
                };
                /** @description Flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/{id}/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all jobs associated with a flow */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the flow. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of jobs for the flow. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FlowJobResponse"][];
                    };
                };
                /** @description Flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{queueName}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a new job */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the queue to submit the job to */
                    queueName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["JobSubmitRequest"];
                };
            };
            responses: {
                /** @description Job submitted successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobResponse"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{queueName}/job/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status of a specific job */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the queue */
                    queueName: string;
                    /** @description ID of the job to get */
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job details retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a specific job */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the queue */
                    queueName: string;
                    /** @description ID of the job to delete */
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Job deleted successfully */
                            message?: string;
                            /**
                             * @description ID of the deleted job
                             * @example 123456789
                             */
                            id?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Forbidden - User does not own this job */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{queueName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all jobs for the authenticated user */
        get: {
            parameters: {
                query?: {
                    /** @description Filter jobs by status */
                    status?: "active" | "delayed" | "completed" | "failed" | "paused" | "waiting-children";
                    /** @description Maximum number of jobs to return */
                    limit?: number;
                    /** @description Number of jobs to skip */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description The name of the queue */
                    queueName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Jobs retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Total number of jobs matching the criteria */
                            total?: number;
                            jobs?: components["schemas"]["JobResponse"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{queueName}/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all scheduled jobs
         * @description Get all scheduled jobs for the authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the queue */
                    queueName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of scheduled jobs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            scheduledJobs?: components["schemas"]["ScheduledJob"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Schedule a new job
         * @description Schedule a job to run at specified times using cron expressions or intervals
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the queue */
                    queueName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ScheduleJobRequest"];
                };
            };
            responses: {
                /** @description Job scheduled successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description ID of the scheduled job
                             * @example 1-dataExport-1625097600000
                             */
                            schedulerId?: string;
                        };
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{queueName}/schedule/{schedulerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific scheduled job
         * @description Get details of a specific scheduled job
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the queue */
                    queueName: string;
                    /** @description ID of the scheduled job */
                    schedulerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Scheduled job details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ScheduledJob"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Scheduled job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Remove a scheduled job
         * @description Remove a specific scheduled job
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the queue */
                    queueName: string;
                    /** @description ID of the scheduled job */
                    schedulerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Scheduled job removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Scheduled job removed successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Scheduled job not found or unauthorized */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of available queue names */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of queue names. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example [
                             *       "jobQueue",
                             *       "webhooks",
                             *       "schedQueue"
                             *     ] */
                            queues?: string[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all webhooks for the authenticated user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Webhooks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WebhookResponse"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /** Add a new webhook */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WebhookCreateRequest"];
                };
            };
            responses: {
                /** @description Webhook created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WebhookResponse"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a webhook */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the webhook to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WebhookUpdateRequest"];
                };
            };
            responses: {
                /** @description Webhook updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WebhookResponse"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Webhook not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** Protected webhook notification route */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the webhook */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Webhook notification received */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Webhook not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** Delete a webhook */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the webhook to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Webhook deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Webhook not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiKey: {
            /**
             * @description A descriptive name for the API key
             * @example My API Key
             */
            name: string;
            /**
             * @description Array of permissions granted to this key
             * @example [
             *       "read:jobs",
             *       "write:jobs"
             *     ]
             */
            permissions: string[];
            /**
             * Format: date-time
             * @description Optional expiration date for the API key
             * @example 2025-12-31T23:59:59Z
             */
            expiresAt?: string;
        };
        ApiKeyResponse: {
            /**
             * @description Unique identifier for the API key
             * @example 1
             */
            id?: number;
            /**
             * @description ID of the user who owns this API key
             * @example 42
             */
            userId?: number;
            /**
             * @description A descriptive name for the API key
             * @example My API Key
             */
            name?: string;
            /**
             * @description First few characters of the key (for display)
             * @example abc12345
             */
            prefix?: string;
            /**
             * @description Array of permissions granted to this key
             * @example [
             *       "read:jobs",
             *       "write:jobs"
             *     ]
             */
            permissions?: string[];
            /**
             * Format: date-time
             * @description When the API key was last used
             * @example 2025-07-01T12:34:56Z
             */
            lastUsed?: string;
            /**
             * Format: date-time
             * @description When the API key was created
             * @example 2025-06-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When the API key expires (null if never)
             * @example 2025-12-31T23:59:59Z
             */
            expiresAt?: string;
            /**
             * @description Whether the API key is active
             * @example true
             */
            isActive?: boolean;
        };
        ApiKeyWithSecretResponse: {
            /**
             * @description Success message
             * @example API key created successfully
             */
            message?: string;
            apiKey?: {
                /**
                 * @description Unique identifier for the API key
                 * @example 1
                 */
                id?: number;
                /**
                 * @description ID of the user who owns this API key
                 * @example 42
                 */
                userId?: number;
                /**
                 * @description A descriptive name for the API key
                 * @example My API Key
                 */
                name?: string;
                /**
                 * @description First few characters of the key (for display)
                 * @example abc12345
                 */
                prefix?: string;
                /**
                 * @description Array of permissions granted to this key
                 * @example [
                 *       "read:jobs",
                 *       "write:jobs"
                 *     ]
                 */
                permissions?: string[];
                /**
                 * Format: date-time
                 * @description When the API key was last used
                 * @example null
                 */
                lastUsed?: string;
                /**
                 * Format: date-time
                 * @description When the API key was created
                 * @example 2025-06-01T00:00:00Z
                 */
                createdAt?: string;
                /**
                 * Format: date-time
                 * @description When the API key expires (null if never)
                 * @example 2025-12-31T23:59:59Z
                 */
                expiresAt?: string;
                /**
                 * @description Whether the API key is active
                 * @example true
                 */
                isActive?: boolean;
                /**
                 * @description The full API key (only shown once upon creation)
                 * @example abc12345def67890ghi12345jkl67890mno12345pqr67890
                 */
                key?: string;
            };
        };
        /** @example {
         *       "message": "Invalid input data",
         *       "code": "VALIDATION_ERROR"
         *     } */
        Error: {
            /** @description Error message */
            message?: string;
            /** @description Error code */
            code?: string;
        };
        SuccessResponse: {
            /**
             * @description Indicates if the operation was successful
             * @example true
             */
            success?: boolean;
            /**
             * @description Success message
             * @example Operation completed successfully
             */
            message?: string;
        };
        FlowJobData: {
            /** @description Name of the job. */
            name: string;
            /** @description The queue this job belongs to. */
            queueName: string;
            /** @description Data for the job. */
            data?: {
                [key: string]: unknown;
            };
            /** @description Job options. */
            opts?: {
                [key: string]: unknown;
            };
            /** @description Nested child jobs. */
            children?: components["schemas"]["FlowJobData"][];
        };
        CreateFlowRequest: {
            /** @description Name for the entire flow. */
            name: string;
            /** @description The queue for the root job of the flow. */
            queueName: string;
            /** @description Data for the root job. */
            data?: {
                [key: string]: unknown;
            };
            /** @description Options for the root job. */
            opts?: {
                [key: string]: unknown;
            };
            /** @description The tree of child jobs for the flow. */
            children?: components["schemas"]["FlowJobData"][];
        };
        FlowResponse: {
            /** @description The flow ID. */
            id?: string;
            /** @description The name of the flow. */
            name?: string;
            /**
             * Format: date-time
             * @description Creation timestamp.
             */
            createdAt?: string;
        };
        FlowJobResponse: {
            /** @description The flow job ID from the database. */
            id?: string;
            /** @description The BullMQ job ID. */
            jobId?: string;
            /** @description The ID of the parent flow. */
            flowId?: string;
            /** @description The name of the queue. */
            queueName?: string;
            /** @description The job data. */
            data?: {
                [key: string]: unknown;
            };
            /** @description The job options. */
            opts?: {
                [key: string]: unknown;
            };
            /** @description The current status of the job. */
            status?: string;
            /** @description The result of the job. */
            result?: {
                [key: string]: unknown;
            } | null;
            /** @description Error information if the job failed. */
            error?: {
                [key: string]: unknown;
            } | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Job: {
            /**
             * @description Auto-generated unique identifier
             * @example job_123456
             */
            id?: string;
            /**
             * @description Job name
             * @example dataExport
             */
            name: string;
            /**
             * @description Job data payload
             * @example {
             *       "format": "csv",
             *       "filters": {
             *         "date": "2025-06-28"
             *       }
             *     }
             */
            data?: Record<string, never>;
            /**
             * @description Current job status
             * @example active
             * @enum {string}
             */
            status?: "active" | "delayed" | "completed" | "failed" | "paused" | "waiting-children";
            /**
             * @description Job progress percentage (0-100)
             * @example 75
             */
            progress?: number;
            /**
             * @description Job execution result
             * @example {
             *       "fileUrl": "https://example.com/exports/data.csv",
             *       "recordCount": 1250
             *     }
             */
            result?: Record<string, never>;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2025-06-28T12:00:00Z
             */
            createdAt?: string;
        };
        JobSubmitRequest: {
            /**
             * @description Job name
             * @example dataExport
             */
            name: string;
            /**
             * @description Job data payload
             * @example {
             *       "format": "csv",
             *       "filters": {
             *         "date": "2025-06-28"
             *       }
             *     }
             */
            data?: Record<string, never>;
        };
        JobResponse: {
            /**
             * @description Auto-generated unique identifier
             * @example job_123456
             */
            id?: string;
            /**
             * @description Job name
             * @example dataExport
             */
            name?: string;
            /**
             * @description Current job status
             * @example active
             * @enum {string}
             */
            status?: "active" | "delayed" | "completed" | "failed" | "paused" | "waiting-children";
            /**
             * @description Job progress percentage (0-100)
             * @example 75
             */
            progress?: number;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2025-06-28T12:00:00Z
             */
            createdAt?: string;
        };
        ScheduleOptions: {
            /**
             * @description Cron expression (e.g., "0 0 * * *" for daily at midnight)
             * @example 0 0 * * *
             */
            cron?: string;
            repeat?: {
                /**
                 * @description Repeat interval in milliseconds
                 * @example 3600000
                 */
                every?: number;
                /**
                 * @description Maximum number of repetitions
                 * @example 24
                 */
                limit?: number;
            };
            /**
             * Format: date-time
             * @description When to start the job
             * @example 2025-07-01T00:00:00.000Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description When to stop scheduling the job
             * @example 2025-12-31T00:00:00.000Z
             */
            endDate?: string;
            /**
             * @description Timezone for cron expressions
             * @example America/New_York
             */
            tz?: string;
        };
        ScheduledJob: {
            /**
             * @description Scheduler ID
             * @example 1-dataExport-1625097600000
             */
            id?: string;
            /**
             * @description Job name
             * @example dataExport
             */
            name?: string;
            /**
             * @description Job data
             * @example {
             *       "format": "csv",
             *       "filters": {
             *         "date": "2025-06-28"
             *       }
             *     }
             */
            data?: Record<string, never>;
            /**
             * @description Job options
             * @example {
             *       "removeOnComplete": {
             *         "count": 3
             *       },
             *       "removeOnFail": {
             *         "count": 5
             *       }
             *     }
             */
            options?: Record<string, never>;
            /**
             * Format: date-time
             * @description Next scheduled run time
             * @example 2025-07-01T00:00:00.000Z
             */
            nextRun?: string;
        };
        ScheduleJobRequest: {
            /**
             * @description Job name
             * @example dataExport
             */
            name: string;
            /**
             * @description Job data payload
             * @example {
             *       "format": "csv",
             *       "filters": {
             *         "date": "2025-06-28"
             *       }
             *     }
             */
            data: Record<string, never>;
            schedule: components["schemas"]["ScheduleOptions"];
            /**
             * @description Job options (same as regular jobs)
             * @example {
             *       "removeOnComplete": {
             *         "count": 3
             *       },
             *       "removeOnFail": {
             *         "count": 5
             *       }
             *     }
             */
            options?: Record<string, never>;
        };
        User: {
            /**
             * @description Auto-generated unique identifier
             * @example user_123456
             */
            id?: string;
            /**
             * @description User's username
             * @example johndoe
             */
            username: string;
            /**
             * Format: email
             * @description User's email
             * @example john.doe@example.com
             */
            email: string;
            /**
             * Format: password
             * @description User's password (hashed)
             * @example ********
             */
            password: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2025-06-28T12:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2025-06-28T12:00:00Z
             */
            updatedAt?: string;
        };
        UserResponse: {
            /**
             * @description Auto-generated unique identifier
             * @example user_123456
             */
            id?: string;
            /**
             * @description User's username
             * @example johndoe
             */
            username?: string;
            /**
             * Format: email
             * @description User's email
             * @example john.doe@example.com
             */
            email?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2025-06-28T12:00:00Z
             */
            createdAt?: string;
        };
        LoginRequest: {
            /**
             * @description Username
             * @example johndoe
             */
            username: string;
            /**
             * Format: password
             * @description User's password
             * @example securePassword123
             */
            password: string;
        };
        LoginResponse: {
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            token?: string;
            user?: components["schemas"]["UserResponse"];
        };
        Webhook: {
            /**
             * @description Auto-generated unique identifier
             * @example webhook_123456
             */
            id?: string;
            /**
             * Format: uri
             * @description Webhook URL
             * @example https://example.com/webhooks/callback
             */
            url: string;
            /**
             * @description Events to trigger this webhook
             * @example [
             *       "job.completed",
             *       "job.failed"
             *     ]
             */
            events?: string[];
            /**
             * @description Whether the webhook is active
             * @example true
             */
            active?: boolean;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2025-06-28T12:00:00Z
             */
            createdAt?: string;
        };
        WebhookCreateRequest: {
            /**
             * Format: uri
             * @description Webhook URL
             * @example https://example.com/webhooks/callback
             */
            url: string;
            /**
             * @description Events to trigger this webhook
             * @example [
             *       "job.completed",
             *       "job.failed"
             *     ]
             */
            events?: string[];
            /**
             * @description Whether the webhook is active
             * @default true
             * @example true
             */
            active: boolean;
        };
        WebhookUpdateRequest: {
            /**
             * Format: uri
             * @description Webhook URL
             * @example https://example.com/webhooks/callback
             */
            url?: string;
            /**
             * @description Events to trigger this webhook
             * @example [
             *       "job.completed",
             *       "job.failed"
             *     ]
             */
            events?: string[];
            /**
             * @description Whether the webhook is active
             * @example true
             */
            active?: boolean;
        };
        WebhookResponse: {
            /**
             * @description Auto-generated unique identifier
             * @example webhook_123456
             */
            id?: string;
            /**
             * Format: uri
             * @description Webhook URL
             * @example https://example.com/webhooks/callback
             */
            url?: string;
            /**
             * @description Events to trigger this webhook
             * @example [
             *       "job.completed",
             *       "job.failed"
             *     ]
             */
            events?: string[];
            /**
             * @description Whether the webhook is active
             * @example true
             */
            active?: boolean;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2025-06-28T12:00:00Z
             */
            createdAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
