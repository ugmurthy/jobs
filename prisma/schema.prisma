// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  password          String
  email             String?   @unique
  webhookUrl        String?   // Legacy field
  webhooks          Webhook[]
  apiKeys           ApiKey[]  // New relation to API keys
  flows             Flow[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // For token refresh
  refreshToken      String?   @unique
  refreshTokenExpiry DateTime?
  
  // For password reset
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
}

model Webhook {
  id          Int      @id @default(autoincrement())
  url         String
  eventType   String   // 'progress', 'completed', 'failed', 'all'
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  
  @@unique([userId, url, eventType])
}

model ApiKey {
  id          Int       @id @default(autoincrement())
  userId      Int
  name        String    // A descriptive name for the API key
  key         String    @unique // The actual API key (hashed)
  prefix      String    @unique // First few characters of the key (for display)
  permissions String    // JSON string of permissions granted to this key
  lastUsed    DateTime?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  
  user        User      @relation(fields: [userId], references: [id])
}

model Flow {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  jobs      FlowJob[]
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
}

model FlowJob {
  id        Int      @id @default(autoincrement())
  jobId     String   @unique
  flowId    Int
  flow      Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)
  queueName String
  data      Json
  opts      Json
  status    String   @default("waiting")
  result    Json?
  error     Json?
  children  Json?    // Store children job keys
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
